{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","usersData","modalVisible","posts","columnsUsers","title","dataIndex","key","render","text","onClick","showUserPosts","columnsPosts","id","this","setState","fetch","response","json","forEach","item","users","className","span","offset","dataSource","columns","visible","onOk","closePostsModal","bind","onCancel","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kVAIqBA,G,kNACnBC,MAAQ,CACNC,UAAW,GACXC,cAAc,EACdC,MAAO,I,EAGTC,aAAe,CACb,CACEC,MAAO,uCACPC,UAAW,KACXC,IAAK,KACLC,OAAQ,SAAAC,GAAI,OACV,uBAAGC,QAAS,kBAAM,EAAKC,cAAcF,KAArC,uGAGJ,CACEJ,MAAO,qBACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,6CACPC,UAAW,WACXC,IAAK,YAEP,CACEF,MAAO,iCACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,6CACPC,UAAW,QACXC,IAAK,U,EAITK,aAAe,CACb,CACEP,MAAO,KACPC,UAAW,KACXC,IAAK,MAEP,CACEF,MAAO,QACPC,UAAW,QACXC,IAAK,SAEP,CACEF,MAAO,OACPC,UAAW,OACXC,IAAK,S,sHAIWM,G,gFAClBC,KAAKC,SAAS,CACZb,cAAc,I,SAEOc,MAAM,qDAAD,OAC2BH,I,cADjDI,E,gBAGYA,EAASC,O,QAAvBf,E,QACEgB,SAAQ,SAAAC,GACZA,EAAKb,IAAMa,EAAKP,MAElBC,KAAKC,SAAS,CAAEZ,U,+IAIhBW,KAAKC,UAAS,SAAAf,GACZ,MAAO,CACLE,cAAc,Q,4KAMKc,MAAM,8C,cAAvBC,E,gBACYA,EAASC,O,QAAvBG,E,QACEF,SAAQ,SAAAC,GACZA,EAAKb,IAAMa,EAAKP,MAElBC,KAAKC,SAAS,CAAEd,UAAWoB,I,qIAI3B,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACrB,kBAAC,IAAD,CACEC,WAAYX,KAAKd,MAAMC,UACvByB,QAASZ,KAAKV,eAHlB,MAQF,kBAAC,IAAD,CACEC,MAAM,gHACNsB,QAASb,KAAKd,MAAME,aACpB0B,KAAMd,KAAKe,gBAAgBC,KAAKhB,MAChCiB,SAAUjB,KAAKe,gBAAgBC,KAAKhB,OAEpC,kBAAC,IAAD,CAAOW,WAAYX,KAAKd,MAAMG,MAAOuB,QAASZ,KAAKF,qB,GAzG5BoB,IAAMC,YCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS/B,OAAO,kBAAC,EAAD,MAASgC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5a77350.chunk.js","sourcesContent":["import React from \"react\";\nimport { Table, Modal, Row, Col } from \"antd\";\nimport \"antd/dist/antd.css\";\n\nexport default class App extends React.Component {\n  state = {\n    usersData: [],\n    modalVisible: false,\n    posts: []\n  };\n\n  columnsUsers = [\n    {\n      title: \"Записи\",\n      dataIndex: \"id\",\n      key: \"id\",\n      render: text => (\n        <a onClick={() => this.showUserPosts(text)}>Посмотреть записи</a>\n      )\n    },\n    {\n      title: \"Имя\",\n      dataIndex: \"name\",\n      key: \"name\"\n    },\n    {\n      title: \"Никнейм\",\n      dataIndex: \"username\",\n      key: \"username\"\n    },\n    {\n      title: \"Почта\",\n      dataIndex: \"email\",\n      key: \"email\"\n    },\n    {\n      title: \"Телефон\",\n      dataIndex: \"phone\",\n      key: \"phone\"\n    }\n  ];\n\n  columnsPosts = [\n    {\n      title: \"Id\",\n      dataIndex: \"id\",\n      key: \"id\"\n    },\n    {\n      title: \"Title\",\n      dataIndex: \"title\",\n      key: \"title\"\n    },\n    {\n      title: \"Body\",\n      dataIndex: \"body\",\n      key: \"body\"\n    }\n  ];\n\n  async showUserPosts(id) {\n    this.setState({\n      modalVisible: true\n    });\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/posts?userId=${id}`\n    );\n    let posts = await response.json();\n    posts.forEach(item => {\n      item.key = item.id;\n    });\n    this.setState({ posts });\n  }\n\n  closePostsModal() {\n    this.setState(state => {\n      return {\n        modalVisible: false\n      };\n    });\n  }\n\n  async componentDidMount() {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    let users = await response.json();\n    users.forEach(item => {\n      item.key = item.id;\n    });\n    this.setState({ usersData: users });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Row>\n          <Col span={12} offset={6}>\n            <Table\n              dataSource={this.state.usersData}\n              columns={this.columnsUsers}\n            />\n            ;\n          </Col>\n        </Row>\n        <Modal\n          title=\"Записи пользователя\"\n          visible={this.state.modalVisible}\n          onOk={this.closePostsModal.bind(this)}\n          onCancel={this.closePostsModal.bind(this)}\n        >\n          <Table dataSource={this.state.posts} columns={this.columnsPosts} />\n        </Modal>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}